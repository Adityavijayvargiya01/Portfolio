---
import { IExperiences } from "@types";

const { title, details } = Astro.props as IExperiences;
---

<section
  class="flex items-start justify-between flex-col sm:flex-row dark:text-light border-y-2 border-indigo"
>
  <h2 class="w-[15rem] mt-16">{title}</h2>
  <div class="w-full">
    {
      details.map((item) => (
        <div class="my-16 fade-in-element opacity-0">
          <div class="flex justify-between items-center flex-wrap">
            <h3 class="text-xl font-semibold">{item.name}</h3>
            <p class="text-md dark:text-gray">
              {item.startDate} - {item.endDate}
            </p>
          </div>
          <p class="text-sm mt-1/2 text-indigo">{item.location}</p>
          <div class="grid md:grid-cols-2 grid-cols-1 gap-2 my-12">
          <img
              src={item.thumbnail}
              class="rounded-xl"
              loading="lazy"
              width="100%"
              height="100%"
              alt=""
           />
          </div>
          <ul class="mt-2 space-y-5">
            {item.description.map((item) => (
              <li class="dark:text-gray fade-in-element opacity-0" style="transition-delay: calc(var(--item-index, 0) * 100ms);">{item}</li>
            ))}
          </ul>
        </div>
      ))
    }
  </div>
</section>

<style>
  .fade-in-element {
    opacity: 0;
    transform: translateX(-25px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .fade-in-active {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  // Initialize Intersection Observer when the page is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const fadeElements = document.querySelectorAll('.fade-in-element');
    
    // Set item index for staggered animations in lists
    document.querySelectorAll('ul').forEach(ul => {
      const items = ul.querySelectorAll('.fade-in-element');
      items.forEach((item, index) => {
        (item as HTMLElement).style.setProperty('--item-index', index.toString());
      });
    });
    
    // Create observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-active');
          // Once the animation is done, we can stop observing
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1, // Trigger when at least 10% of the element is visible
      rootMargin: '0px 0px -50px 0px' // Slightly before the element comes into view
    });
    
    // Observe all fade elements
    fadeElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>
